\documentclass{article}

\usepackage{natbib}
\usepackage{graphics}
\usepackage{amsmath}
\usepackage{indentfirst}
\usepackage[utf8]{inputenc}
\usepackage{hyperref}

%\VignetteIndexEntry{The geosphere package}

\SweaveOpts{keep.source=TRUE}

\begin{document}

<<foo,include=FALSE,echo=FALSE>>=
options(keep.source = TRUE, width = 60)
foo <- packageDescription("geosphere")
@

\title{The "geosphere" package (Version \Sexpr{foo$Version})}
\author{Robert J. Hijmans}
\maketitle


\section{Introduction}

This vignette describes the R package '\verb@geosphere@'. The package implements spherical trigonometry functions for geographic applications. Most functions have applications in navigation, but others are more general. For example, to estiate the location of an object at a given direction and distance. 
  
There are a number of functions to compute distance and direction (bearing, azimuth, course) along Great Circles (= shortest distance on a sphere, or "as the crow flies") and along rhumb lines (lines of constant direction). There are also funtctions to compute intersections of great circles, and of rhumb lines, and daylength.

Geographic locations must be specified in latitude and longitude in degrees (and NOT in radians). Degrees are (obviously) in decimal notation. Thus 12 degrees, 30 minutes, 10 seconds = 12 + 10/60 + 30/3600 =  12.175 degrees. The Southern and Western hemispheres have a negative sign.

The default unit of distance is meter; but this can be adjusted by supplying a different radius 'r' to functions.

Directions are expressed in degrees (N = 0 and 360,  E = 90, S = 180, and W = 270 degrees).

This is one of the first versions of this package, so please look out for bugs and let us know if you find any.


\section{Distance}
There are four different functions to comupte distance between two points. These are, in order of increasing complexity of the algorithm, the 'Law of cosines', 'haversine', 'Vincenty Sphere' and 'Vincenty Ellipsoid' methods. The first three assume the earth to be a sphere, while the 'Vincenty Ellipsoid' assumes it is an elliposoid (which is closer to the truth). The results from the first three functions are identical for pratical purposes. This was not the case on earlier computers because they had lower precision floating number computations (8 digits compared to the current 16 digits). There are very small differences between the 'law of the Cosine' and other two methods, at very short distances, and even smaller differences between the 'haversine' and 'Vincenty Sphere' methods at larger distances. 

<<fig=TRUE , echo=TRUE>>=
library(geosphere)
Lon = c(1:9/1000, 1:9/100, 1:9/10, 1:90*2) 
Lat = c(1:9/1000, 1:9/100, 1:9/10, 1:90) 
dcos = distCosine(c(0,0), cbind(Lon, Lat))
dhav = distHaversine(c(0,0), cbind(Lon, Lat))
dvsp = distVincentySphere(c(0,0), cbind(Lon, Lat))
par(mfrow=(c(1,2)))
plot(log(dcos), dcos-dhav, col='red', ylim=c(-1e-05, 1e-05), 
            xlab="Log 'Law of Cosines' distance (m)", 
            ylab="Law of Cosines minus Haversine distance")
plot(log(dhav), dhav-dvsp, col='blue',
            xlab="Log 'Haversine' distance (m)", 
            ylab="Vincenty Sphere minus Haversine distance")
@

The difference with the 'Vincenty Ellipsoid' method is more pronounced. In the example below (using the default WGS83 ellipsoid), the difference is about 0.3% at very small distances, and 0.15% at larger distances.

<<fig=TRUE , echo=TRUE>>=
dvse = distVincentyEllipsoid(c(0,0), cbind(Lon, Lat))
plot(dvsp/1000, (dvsp-dvse)/1000, col='blue', xlab='Vincenty Sphere Distance (km)', 
        ylab="Difference between 'Vincenty Sphere' and 'Vincenty Ellipsoid' methods (km)")
@

\section{Great Circles}



\section{Rhumb lines}



\end{document}

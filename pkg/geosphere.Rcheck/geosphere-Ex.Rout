
R version 2.9.2 (2009-08-24)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### * <HEADER>
> ###
> attach(NULL, name = "CheckExEnv")
> assign("nameEx",
+        local({
+ 	   s <- "__{must remake R-ex/*.R}__"
+            function(new) {
+                if(!missing(new)) s <<- new else s
+            }
+        }),
+        pos = "CheckExEnv")
> ## Add some hooks to label plot pages for base and grid graphics
> assign("base_plot_hook",
+        function() {
+            pp <- par(c("mfg","mfcol","oma","mar"))
+            if(all(pp$mfg[1:2] == c(1, pp$mfcol[2]))) {
+                outer <- (oma4 <- pp$oma[4]) > 0; mar4 <- pp$mar[4]
+                mtext(sprintf("help(\"%s\")", nameEx()), side = 4,
+                      line = if(outer)max(1, oma4 - 1) else min(1, mar4 - 1),
+                outer = outer, adj = 1, cex = .8, col = "orchid", las=3)
+            }
+        },
+        pos = "CheckExEnv")
> assign("grid_plot_hook",
+        function() {
+            grid::pushViewport(grid::viewport(width=grid::unit(1, "npc") -
+                               grid::unit(1, "lines"), x=0, just="left"))
+            grid::grid.text(sprintf("help(\"%s\")", nameEx()),
+                            x=grid::unit(1, "npc") + grid::unit(0.5, "lines"),
+                            y=grid::unit(0.8, "npc"), rot=90,
+                            gp=grid::gpar(col="orchid"))
+        },
+        pos = "CheckExEnv")
> setHook("plot.new",     get("base_plot_hook", pos = "CheckExEnv"))
> setHook("persp",        get("base_plot_hook", pos = "CheckExEnv"))
> setHook("grid.newpage", get("grid_plot_hook", pos = "CheckExEnv"))
> assign("cleanEx",
+        function(env = .GlobalEnv) {
+ 	   rm(list = ls(envir = env, all.names = TRUE), envir = env)
+            RNGkind("default", "default")
+ 	   set.seed(1)
+    	   options(warn = 1)
+ 	   .CheckExEnv <- as.environment("CheckExEnv")
+ 	   delayedAssign("T", stop("T used instead of TRUE"),
+ 		  assign.env = .CheckExEnv)
+ 	   delayedAssign("F", stop("F used instead of FALSE"),
+ 		  assign.env = .CheckExEnv)
+ 	   sch <- search()
+ 	   newitems <- sch[! sch %in% .oldSearch]
+ 	   for(item in rev(newitems))
+                eval(substitute(detach(item), list(item=item)))
+ 	   missitems <- .oldSearch[! .oldSearch %in% sch]
+ 	   if(length(missitems))
+ 	       warning("items ", paste(missitems, collapse=", "),
+ 		       " have been removed from the search path")
+        },
+        pos = "CheckExEnv")
> assign("ptime", proc.time(), pos = "CheckExEnv")
> ## at least one package changes these via ps.options(), so do this
> ## before loading the package.
> ## Use postscript as incomplete files may be viewable, unlike PDF.
> ## Choose a size that is close to on-screen devices, fix paper
> grDevices::ps.options(width = 7, height = 7, paper = "a4", reset = TRUE)
> grDevices::postscript("geosphere-Ex.ps")
> 
> assign("par.postscript", graphics::par(no.readonly = TRUE), pos = "CheckExEnv")
> options(contrasts = c(unordered = "contr.treatment", ordered = "contr.poly"))
> options(warn = 1)
> options(pager = "console")
> library('geosphere')
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> assign(".oldNS", loadedNamespaces(), pos = 'CheckExEnv')
> cleanEx(); nameEx("alongTrackDistance")
> ### * alongTrackDistance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alongTrackDistance
> ### Title: Along Track Distance
> ### Aliases: alongTrackDistance
> ### Keywords: spatial
> 
> ### ** Examples
> 
> alongTrackDistance(c(0,0),c(90,90),c(80,80))
 bearing 
219802.2 
> 
> 
> 
> cleanEx(); nameEx("antipode")
> ### * antipode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: antipode
> ### Title: Antipodes
> ### Aliases: antipode isAntipodal
> ### Keywords: spatial
> 
> ### ** Examples
> 
> antipode(rbind(c(5,52), c(-120,37), c(-60,0), c(0,70)))
     lon  lat
[1,]  -5 -128
[2,] 120 -143
[3,]  60 -180
[4,]   0 -110
> isAntipodal(c(0,0), c(180,0))
[1] TRUE
> 
> 
> 
> cleanEx(); nameEx("bearing")
> ### * bearing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bearing
> ### Title: Bearing
> ### Aliases: bearing
> ### Keywords: spatial
> 
> ### ** Examples
> 
> bearing(c(0,0),c(90,90))
bearing 
      0 
> 
> 
> 
> cleanEx(); nameEx("brngRhumb")
> ### * brngRhumb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: brngRhumb
> ### Title: Rhumbline bearing
> ### Aliases: brngRhumb
> ### Keywords: spatial
> 
> ### ** Examples
> 
> brngRhumb(c(0,0),c(90,90))
[1] 2.409386
> 
> 
> 
> cleanEx(); nameEx("crossTrackDistance")
> ### * crossTrackDistance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: crossTrackDistance
> ### Title: Cross Track Distance
> ### Aliases: crossTrackDistance
> ### Keywords: spatial
> 
> ### ** Examples
> 
> crossTrackDistance(c(0,0),c(90,90),c(80,80))
 bearing 
496.6657 
> 
> 
> 
> cleanEx(); nameEx("crossingParallel")
> ### * crossingParallel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: crossingParallels
> ### Title: Crossing parellels
> ### Aliases: crossingParallels
> ### Keywords: spatial
> 
> ### ** Examples
> 
> crossingParallels(c(5,52), c(-120,37), 40)
         [,1]     [,2]
[1,] 43.47257 -92.1501
> 
> 
> 
> cleanEx(); nameEx("destPoint")
> ### * destPoint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: destPoint
> ### Title: Destination given bearing and distance, when following a great
> ###   circle
> ### Aliases: destPoint
> ### Keywords: spatial
> 
> ### ** Examples
> 
> p <- c(5,52)
> d <- destPoint(p,30,10000)
> 
> #final bearing, when arriving at endpoint: 
> finalBearing(d, p)
bearing 
    210 
> 
> 
> 
> 
> cleanEx(); nameEx("destPointRhumb")
> ### * destPointRhumb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: destPointRhumb
> ### Title: Destination along a rhumb line
> ### Aliases: destPointRhumb
> ### Keywords: spatial
> 
> ### ** Examples
> 
> destPointRhumb(c(0,0), 30, 100000, r = 6378137)
           lon       lat
[1,] 0.4491714 0.7779639
> 
> 
> 
> cleanEx(); nameEx("distCosine")
> ### * distCosine
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distCosine
> ### Title: 'Law of cosines' great circle distance
> ### Aliases: distCosine
> ### Keywords: spatial
> 
> ### ** Examples
> 
> distCosine(c(0,0),c(90,90))
[1] 10018754
> 
> 
> 
> cleanEx(); nameEx("distHaversine")
> ### * distHaversine
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distHaversine
> ### Title: 'Havesine' great circle distance
> ### Aliases: distHaversine
> ### Keywords: spatial
> 
> ### ** Examples
> 
> distHaversine(c(0,0),c(90,90))
[1] 10018754
> 
> 
> 
> cleanEx(); nameEx("distRhumb")
> ### * distRhumb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distRhumb
> ### Title: Distance along a 'rhumb line'
> ### Aliases: distRhumb
> ### Keywords: spatial
> 
> ### ** Examples
> 
> distRhumb(c(0,0),c(90,90))
[1] 10027619
> 
> 
> 
> cleanEx(); nameEx("distVincentyEllipsoid")
> ### * distVincentyEllipsoid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distVincentyEllipsoid
> ### Title: 'Vincenty' (ellipsoid) great circle distance
> ### Aliases: distVincentyEllipsoid
> ### Keywords: spatial
> 
> ### ** Examples
> 
> distVincentyEllipsoid(c(0,0),c(90,90))
[1] 10001966
> # on a 'Clarke 1880' ellipsoid
> distVincentyEllipsoid(c(0,0),c(90,90), a=6378249.145, b=6356514.86955, f=1/293.465)
[1] 10001868
> 
> 
> 
> cleanEx(); nameEx("distVincentySphere")
> ### * distVincentySphere
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distVincentySphere
> ### Title: 'Vincenty' (sphere) great circle distance
> ### Aliases: distVincentySphere
> ### Keywords: spatial
> 
> ### ** Examples
> 
> distVincentySphere(c(0,0),c(90,90))
[1] 10018754
> 
> 
> 
> cleanEx(); nameEx("finalBearing")
> ### * finalBearing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: finalBearing
> ### Title: Final bearing
> ### Aliases: finalBearing
> ### Keywords: spatial
> 
> ### ** Examples
> 
> bearing(c(0,0),c(90,90))
bearing 
      0 
> finalBearing(c(0,0),c(90,90))
bearing 
     90 
> 
> 
> 
> cleanEx(); nameEx("greatCircle")
> ### * greatCircle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: greatCircle
> ### Title: Intersecting radials
> ### Aliases: greatCircle
> ### Keywords: spatial
> 
> ### ** Examples
> 
> greatCircle(c(5,52), c(-120,37), n=36)
       lon         lat
 [1,] -170 -48.1578258
 [2,] -160 -37.4620764
 [3,] -150 -21.4292761
 [4,] -140  -0.3878386
 [5,] -130  20.7643542
 [6,] -120  37.0000000
 [7,] -110  47.8571425
 [8,] -100  54.9024899
 [9,]  -90  59.5002369
[10,]  -80  62.4976247
[11,]  -70  64.3825856
[12,]  -60  65.4270092
[13,]  -50  65.7685930
[14,]  -40  65.4502820
[15,]  -30  64.4320903
[16,]  -20  62.5801021
[17,]  -10  59.6281858
[18,]    0  55.0979761
[19,]   10  48.1578258
[20,]   20  37.4620764
[21,]   30  21.4292761
[22,]   40   0.3878386
[23,]   50 -20.7643542
[24,]   60 -37.0000000
[25,]   70 -47.8571425
[26,]   80 -54.9024899
[27,]   90 -59.5002369
[28,]  100 -62.4976247
[29,]  110 -64.3825856
[30,]  120 -65.4270092
[31,]  130 -65.7685930
[32,]  140 -65.4502820
[33,]  150 -64.4320903
[34,]  160 -62.5801021
[35,]  170 -59.6281858
[36,]  180 -55.0979761
> 
> 
> 
> cleanEx(); nameEx("greatCircleIntermediate")
> ### * greatCircleIntermediate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: greatCircleIntermediat
> ### Title: Intermediate points on a great circle
> ### Aliases: greatCircleIntermediate
> ### Keywords: spatial
> 
> ### ** Examples
> 
> greatCircleIntermediate(c(5,52), c(-120,37), n=10)
              lon      lat
 [1,]   -2.616559 56.47434
 [2,]  -12.885997 60.61586
 [3,]  -26.645477 63.91370
 [4,]  -43.905358 65.65382
 [5,]  -62.617031 65.22530
 [6,]  -79.504453 62.61430
 [7,]  -92.799017 58.40287
 [8,] -102.688806 53.29528
 [9,] -110.036053 47.82583
[10,] -115.622008 42.33071
> 
> 
> 
> cleanEx(); nameEx("greatCircleIntersect")
> ### * greatCircleIntersect
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: greatCircleIntersect
> ### Title: Intersections of two great circles
> ### Aliases: greatCircleIntersect
> ### Keywords: spatial
> 
> ### ** Examples
> 
> p1 <- c(5,52); p2 <- c(-120,37); p3 <- c(-60,0); p4 <- c(0,70)
> greatCircleIntersect(p1,p2,p3,p4)
         lon1     lat1     lon2      lat2
[1,] -21.8096 62.98678 158.1904 -62.98678
> 
> 
> 
> cleanEx(); nameEx("midPoint")
> ### * midPoint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: midPoint
> ### Title: Mid-point
> ### Aliases: midPoint
> ### Keywords: spatial
> 
> ### ** Examples
> 
> midPoint(c(0,0),c(90,90))  
              lon lat
[1,] 3.508239e-15  45
> 
> 
> 
> cleanEx(); nameEx("polePoint")
> ### * polePoint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: polePoint
> ### Title: Highest latitude on a great circle
> ### Aliases: polePoint
> ### Keywords: spatial
> 
> ### ** Examples
> 
> polePoint(c(5,52),30)
[1] 60.12580 72.07145
> 
> 
> 
> cleanEx(); nameEx("radialIntersect")
> ### * radialIntersect
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: radialIntersect
> ### Title: Intersecting radials
> ### Aliases: radialIntersect
> ### Keywords: spatial
> 
> ### ** Examples
> 
> radialIntersect(c(10,0), 10, c(-10,0), 10)
         lon3       lat3
[1,] 3.577385 -0.8027042
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.16 0.02 0.32 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
